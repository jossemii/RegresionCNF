syntax = "proto3";
package hyweb;

//  -----------------------
//  DEFINITIONS.
//  -----------------------
message PrimitiveDef {
    repeated string tag = 1; // INT32, ...
    optional string regex = 2; // {0-10}, ...
    // Primitive specification can be applied. <- must be optional
}

message EnumDef {
    repeated string tag = 1;
    map<string, int32> value = 2;
}

message FieldDef {
    oneof value{
        MessageDef message = 1;
        PrimitiveDef primitive = 2;
        EnumDef enum = 3;
    }
}

message ParamDef {
    int32 index = 1;
    repeated string tag = 2;
    // In order to avoid loops, 
    // in the definition of a message only
    // the sub-messages must be fully 
    // specified the first time they appear,
    // if they are repeated again only the tags are added.
    FieldDef field = 3;
    bool repeated = 4;
    bool optional = 5;
}

message OneofDef {
    repeated int32 index = 1;
}

message MessageDef {
    repeated string tag = 1;
    repeated ParamDef param = 2;
    repeated OneofDef oneof = 3; // have a list of oneof's params' index.
}

message MethodDef {
    int32 index = 1;
    repeated string tag = 2;
    FieldDef input_message = 3;
    bool is_input_stream = 4;
    FieldDef output_message = 5;
    bool is_output_stream = 6;
}

message ApplicationDef {
    repeated string tag = 1;
    repeated MethodDef method = 2; // Exemple of method call: 8080.1()
}

message Any {
    FieldDef field = 1;
    bytes value = 2;
}

//  -----------------------
//  SERVICE SPECIFICATION.
//  -----------------------

//  It's used for give the option to prune the specification.
//  Index 15 is the maximum that use only 1 byte.
message HashTag {
    message Hash {
        bytes type = 1;
        bytes value = 2;
    }
    repeated Hash hash = 1;
    repeated string tag = 2;
}

// API: Defines how you can interact with the service, the ports where it listens, the communication protocols that it supports, methods and the different errors and responses that it can give.
message ProtocolMesh {
    HashTag hashtag = 15;
    // Mesh specification can be applied. <- must be optional
}

message Slot {
    int32 port = 1;
    ProtocolMesh transport_protocol = 2;
}

message Api{
    ApplicationDef app_protocol = 1;
    repeated Slot slot = 2;
    // Cost function can be applied. <- must be optional (index 3).
}

// Container: Specifies the container where the service runs, microarchitecture, entry point and filesystem (DAG?), and environment variables.
message Architecture {
    HashTag hashtag = 15;
    // Architecture specification can be applied. <- must be optional.
}

message Filesystem {
    message Branch { 
        oneof item {
            bytes file = 1;
            string link = 2;
            Filesystem filesystem = 3;
        }
        string name = 4;
        // ¿ more params ... ?
    }
    HashTag hashtag = 15;
    repeated Branch branch = 1;
}

message Container {
    Architecture architecture = 1;
    Filesystem filesystem = 2;
    map<string, FieldDef> enviroment_variables = 3;
    string entrypoint = 4;
}

// Tensor: Defines the “intelligence” that the service can provide, I think it would be a description of a polynomial (without coefficients and describing the variables).
message Tensor {
    message Index {
        string id = 1;
        FieldDef field = 2;
        HashTag hashtag = 15;
    }
    HashTag hashtag = 15;
    repeated Index index = 1;
    int32 rank = 2;
}

// Ledger: Defines the database that the service can provide.
message Ledger {
    HashTag hashtag = 15;
    // Ledger specification can be applied. <- must be optional
    //  it would be a class diagram and a consensus algorithm.
}

message Service {
    HashTag hashtag = 15;
    MessageDef syntax = 1;
    Container container = 2;
    Api api = 3;
    Tensor tensor = 4;
    Ledger ledger = 5;
}


//  ------------------------
//  INSTANCE SPECIFICATION.
//  ------------------------
// Used for specify node peers, node-host instancies, ledger-nodes instancies and tensor instancies.
message Instance {
    message Uri {
        string ip = 1;
        int32 port = 2;
    }
    message Uri_Slot {
        int32 internal_port = 1;
        repeated Uri uri = 2;
    }
    Api api = 1;
    repeated Uri_Slot uri_slot = 2; // map like [ 8080 -> 192.17.0.4:6899, ]
}

//  -------------------------------
//  SERVICE INITIAL CONFIGURATION.
//  -------------------------------
// The __config__ file is mounted on each service on the filesystem's root.
message Configuration {
    map<string, Any> enviroment_variables = 1;
    map<int32, ProtocolMesh> spec_slot = 2; // Only some of the specified ports and a protocol-submesh subgroup of the protocol-submesh of each slot.    
}

message ConfigurationFile{
    Instance gateway = 1;
    Configuration config = 2;
    // Un servicio puede solicitar instancias de servicios con un ledger o un tensor aunque este no los ofrezca, y por tanto no aparezcan estos en su especificacion.
    // Pero para los tensores y ledgers que si se especifican en la descripcion del servicio se puede concluir que van a ser requeridas instancias de los mismos al nodo,
    // por lo tanto, el nodo tiene la opcion de añadir estas instancias de manera opcional en la configuracion de arranque del servicio.
    repeated Instance tensor_instances = 3;
    repeated Instance ledger_instances = 4;
}